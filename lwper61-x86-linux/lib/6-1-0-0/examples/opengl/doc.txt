;; -*- Mode: Text; rcs-header: "$Header: /hope/lwhope1-cam/hope.0/compound/61/LISPopengl/RCS/doc.txt,v 1.9.2.1 2011/08/24 13:27:19 davef Exp $" -*-

;; Copyright (c) 1987--2012 LispWorks Ltd. All rights reserved.


LispWorks OpenGL interface
--------------------------


The lispworks library directory examples/opengl contains source code
for a Lisp interface to the OpenGL libraries. This interface allows
creating of CAPI panes on which you can draw using OPENGL.
	


Installation
------------

To install, copy the entire directory to a working directory of your
own, and then do

(load "<working directory>/load")

This will compile and load all the files needed for the CAPI interface.


CAPI Interfaces
---------------

The class OPENGL:OPENGL-PANE is a subclass of CAPI:OUTPUT-PANE which
can be used for OpenGL rendering.  To draw using OpenGL functions
on a OPENGL:OPENGL-PANE, the calls to the OpenGL functions must be
wrapped by the macro OPENGL:RENDERING-ON this way:

   (OPENGL:RENDERING-ON (opengl-pane)
     <opengl-drawing-operations>)

OPENGL:RENDERING-ON sets the GL context, and anything else that must
be set to integrate with CAPI. 

There is an example of a simple CAPI interface using a
OPENGL:OPENGL-PANE at the bottom of the capi.lisp file, which just
puts an OPENGL-PANE in an interface. There ia fuller example in
the sub-directory examples. see the comment at the top of
examples/icosahedron. 


OpenGL Pane Configuration
-------------------------

When using the CAPI interface, you will need to pass a :configuration
initarg to your OpenGL window in order to specify its attributes.  The value
should be a plist with the following indicators:

      :double-buffer, :double-buffered,
               - synonyms, value T or NIL.
      :buffer-size 
               - color buffer size for indexed colormap visuals
      :red-size, :green-size, :blue-size, :alpha-size 
               - sizes of color buffer channels for RGB visuals.
      :accum   - accumulator buffer size (per channel), or NIL.
      :accum-red-size, accum-green-size, accum-blue-size, accum-alpha-size 
               - sizes of accumulator buffer channels, which default to the
                 :accum value.
      :depth-buffer 
               - value is a depth buffer size or NIL
      :stencil-size 
               - stencil buffer size or NIL.
      :aux     - aux buffer size or NIL.
      :direct  - when T, a direct connection to the graphics subsystem is
                 made if it can be determined that the display is local; if
                 this can't be determined, the connection will be indirect.
                 when :FORCE, the connect is always made direct (it may fail)
                 when NIL, the connect is always indirect. 
                 ** Note that this option is only supported under GLX **


The Functions
-------------

The interface contains foreign function definitions for the OpenGL Library and
OpenGL Utility Library.  The C function names have been translated into Lisp
function names using hyphens to separate the "gl" prefix and other places
where transition case from lower to upper is used. For example glBitmap
becomes the Lisp function OPENGL:GL-BITMAP, glBlendEquationEXT becomes
OPENGL:GL-BLEND-EQUATION-EXT, gluLookAt becomes OPENGL:GL-LOOK-AT.

In addition to the OpenGL functions, there are:
RENDERING-ON                         - macro that must be used around
                                       any rendering with OpenGl
                                       functions to an OPENGL:OPENGL-PANE 

PROCESS-HAS-OPENGL-LOCK-P            - test if a process is currently rendering.
PROCESS-WITH-OPENGL-LOCK             - returns the process currently rendering.
SWAP-BUFFERS                         - swap foreground and background buffers on 
                                       a double-buffered OpenGL window.
DESCRIBE-CONFIGURATION               - prints a full description of the OpenGL 
                                       configuration of an OpenGL window.

OpenGL Rendering
----------------

With the CAPI interface, OpenGL rendering is done by enclosing your
OpenGL calls in the OPENGL:RENDERING-ON macro.  This macro ensures that
the GLX context is attached to the right window.  It also deals with
multiprocessing issues by preventing multiple lightweight processes from
rendering on the same OpenGL window at the same time.

OPENGL:RENDERING-ON can be nested on a single OpenGL pane to any depth within
a single lightweight Lisp process, but any nested entry to OPENGL:RENDERING-ON
on another OpenGL pane will cause an error. An entry from another lightweight
process will block.

On platforms that need locking around drawing operations,
OPENGL:RENDERING-ON also locks. That prevents other processes from
using CAPI while a process is inside the body of OPENGL:RENDERING-ON.
That means that the body of OPENGL:RENDERING-ON needs to avoid lengthy
computations and any I/O (which can hang), and must not wait for
something which depends on another process which may be trying to use
CAPI.
